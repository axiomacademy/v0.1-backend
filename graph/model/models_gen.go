// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type User interface {
	IsUser()
}

type Heartbeat struct {
	Status   HeartbeatStatus `json:"status"`
	LastSeen int             `json:"lastSeen"`
}

type Lesson struct {
	ID       string   `json:"id"`
	Subject  *Subject `json:"subject"`
	Summary  string   `json:"summary"`
	Tutor    *Tutor   `json:"tutor"`
	Student  *Student `json:"student"`
	Duration int      `json:"duration"`
	Date     string   `json:"date"`
	Chat     string   `json:"chat"`
}

type LoginInfo struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type MatchRequest struct {
	Subject *NewSubject `json:"subject"`
}

type NewStudent struct {
	Username   string `json:"username"`
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	Password   string `json:"password"`
	ProfilePic string `json:"profilePic"`
}

type NewSubject struct {
	Name  SubjectName  `json:"name"`
	Level SubjectLevel `json:"level"`
}

type NewTutor struct {
	Username   string      `json:"username"`
	FirstName  string      `json:"firstName"`
	LastName   string      `json:"lastName"`
	Email      string      `json:"email"`
	Password   string      `json:"password"`
	ProfilePic string      `json:"profilePic"`
	HourlyRate int         `json:"hourlyRate"`
	Bio        string      `json:"bio"`
	Education  []string    `json:"education"`
	Subject    *NewSubject `json:"subject"`
}

type Notification struct {
	Student *Student `json:"student"`
	Subject *Subject `json:"subject"`
	Token   string   `json:"token"`
}

type Student struct {
	ID         string `json:"id"`
	Username   string `json:"username"`
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	ProfilePic string `json:"profilePic"`
}

func (Student) IsUser() {}

type Subject struct {
	Name  SubjectName  `json:"name"`
	Level SubjectLevel `json:"level"`
}

type Tutor struct {
	ID         string   `json:"id"`
	Username   string   `json:"username"`
	FirstName  string   `json:"firstName"`
	LastName   string   `json:"lastName"`
	Email      string   `json:"email"`
	ProfilePic string   `json:"profilePic"`
	HourlyRate int      `json:"hourlyRate"`
	Bio        string   `json:"bio"`
	Rating     int      `json:"rating"`
	Education  []string `json:"education"`
	Subject    *Subject `json:"subject"`
}

func (Tutor) IsUser() {}

type HeartbeatStatus string

const (
	HeartbeatStatusAvailable   HeartbeatStatus = "AVAILABLE"
	HeartbeatStatusUnavailable HeartbeatStatus = "UNAVAILABLE"
)

var AllHeartbeatStatus = []HeartbeatStatus{
	HeartbeatStatusAvailable,
	HeartbeatStatusUnavailable,
}

func (e HeartbeatStatus) IsValid() bool {
	switch e {
	case HeartbeatStatusAvailable, HeartbeatStatusUnavailable:
		return true
	}
	return false
}

func (e HeartbeatStatus) String() string {
	return string(e)
}

func (e *HeartbeatStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HeartbeatStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HeartbeatStatus", str)
	}
	return nil
}

func (e HeartbeatStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubjectLevel string

const (
	SubjectLevelAlevels SubjectLevel = "ALEVELS"
	SubjectLevelOlevels SubjectLevel = "OLEVELS"
	SubjectLevelIb      SubjectLevel = "IB"
)

var AllSubjectLevel = []SubjectLevel{
	SubjectLevelAlevels,
	SubjectLevelOlevels,
	SubjectLevelIb,
}

func (e SubjectLevel) IsValid() bool {
	switch e {
	case SubjectLevelAlevels, SubjectLevelOlevels, SubjectLevelIb:
		return true
	}
	return false
}

func (e SubjectLevel) String() string {
	return string(e)
}

func (e *SubjectLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubjectLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubjectLevel", str)
	}
	return nil
}

func (e SubjectLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubjectName string

const (
	SubjectNamePhysics     SubjectName = "PHYSICS"
	SubjectNameEconomics   SubjectName = "ECONOMICS"
	SubjectNameMathematics SubjectName = "MATHEMATICS"
	SubjectNameChemistry   SubjectName = "CHEMISTRY"
	SubjectNameBiology     SubjectName = "BIOLOGY"
)

var AllSubjectName = []SubjectName{
	SubjectNamePhysics,
	SubjectNameEconomics,
	SubjectNameMathematics,
	SubjectNameChemistry,
	SubjectNameBiology,
}

func (e SubjectName) IsValid() bool {
	switch e {
	case SubjectNamePhysics, SubjectNameEconomics, SubjectNameMathematics, SubjectNameChemistry, SubjectNameBiology:
		return true
	}
	return false
}

func (e SubjectName) String() string {
	return string(e)
}

func (e *SubjectName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubjectName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubjectName", str)
	}
	return nil
}

func (e SubjectName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
